version: "3.9"

services:
  php-fpm:
    build:
      args:
        DOCKER_IMAGE_FOLDER: $DOCKER_IMAGE_FOLDER
        GROUP_ID: $GROUP_ID
        USER_ID: $USER_ID
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/php-fpm/Dockerfile
    command: sh -c "cd /home/dockeruser && chown $USER_ID:$GROUP_ID magento && php-fpm"
    container_name: docker-magento_php-fpm
    depends_on:
      - mysql
    networks:
      - external
      - internal
    volumes:
      - $MAGENTO_DIRECTORY:/home/dockeruser/magento
      - $DOCKER_DIRECTORY/images/php-fpm/php.ini:/usr/local/etc/php/php.ini
      - $DOCKER_DIRECTORY/images/php-fpm/.composer:/home/dockeruser/.composer

  node:
    hostname: node
    build:
      args:
        GROUP_ID: $GROUP_ID
        USER_ID: $USER_ID
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/node/Dockerfile
    command: sh -c "cd /home/node && chown $USER_ID:$GROUP_ID nuxt && tail -f /dev/null"
    container_name: docker-magento_node
    environment:
      MAGENTO_GRAPHQL: "http://nginx:8080/graphql"
    networks:
      - external
      - internal
    volumes:
      - $NUXT_DIRECTORY:/home/node/nuxt

  nginx:
    build:
      args:
        GROUP_ID: $GROUP_ID
        USER_ID: $USER_ID
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/nginx/Dockerfile
    command: sh -c "cd /home/dockeruser && chown $USER_ID:$GROUP_ID magento && nginx -g 'daemon off;'"
    container_name: docker-magento_nginx
    depends_on:
      - php-fpm
      - node
      - adminer
      - kibana
      - rabbitmq
      - redis-admin
      - mailhog
    networks:
      - external
    ports:
      - 80:8080
    volumes:
      - $MAGENTO_DIRECTORY:/home/dockeruser/magento
      - $DOCKER_DIRECTORY/images/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - nginx_logs:/var/log/nginx

  mysql:
    build:
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/mysql/Dockerfile
    container_name: docker-magento_mysql
    environment:
      MYSQL_DATABASE: "magento"
      MYSQL_PASSWORD: "magento"
      MYSQL_ROOT_PASSWORD: "magento"
      MYSQL_USER: "magento"
    networks:
      - internal
    platform: linux/amd64
    volumes:
      - mysql:/var/lib/mysql
      - ./images/mysql/custom.my.cnf:/etc/mysql/conf.d/custom.my.cnf

  adminer:
    build:
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/adminer/Dockerfile
    container_name: docker-magento_adminer
    depends_on:
      - mysql
    networks:
      - external
      - internal

  elasticsearch:
    build:
      args:
        DOCKER_IMAGE_FOLDER: $DOCKER_IMAGE_FOLDER
        GROUP_ID: $GROUP_ID
        USER_ID: $USER_ID
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/elasticsearch/Dockerfile
    container_name: docker-magento_elasticsearch
    environment:
      ELASTIC_PASSWORD: changeme
      ES_JAVA_OPTS: "-Xms1g -Xmx2g"
    networks:
      - internal
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
      - $DOCKER_DIRECTORY/images/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

  logstash:
    build:
      args:
        DOCKER_IMAGE_FOLDER: $DOCKER_IMAGE_FOLDER
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/logstash/Dockerfile
    container_name: docker-magento_logstash
    depends_on:
      - elasticsearch
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    networks:
      - internal
    volumes:
      - $DOCKER_DIRECTORY/images/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - $DOCKER_DIRECTORY/images/logstash/pipeline:/usr/share/logstash/pipeline

  filebeat:
    build:
      args:
        DOCKER_IMAGE_FOLDER: $DOCKER_IMAGE_FOLDER
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/filebeat/Dockerfile
    container_name: docker-magento_filebeat
    depends_on:
      - logstash
    networks:
      - internal
    volumes:
      - $DOCKER_DIRECTORY/images/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - nginx_logs:/var/log/nginx
      - $MAGENTO_DIRECTORY/var/log:/var/log/magento
      - $MAGENTO_DIRECTORY/var/report:/var/report/magento

  kibana:
    build:
      args:
        DOCKER_IMAGE_FOLDER: $DOCKER_IMAGE_FOLDER
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/kibana/Dockerfile
    container_name: docker-magento_kibana
    depends_on:
      - elasticsearch
    networks:
      - external
      - internal
    platform: linux/amd64
    volumes:
      - $DOCKER_DIRECTORY/images/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

  rabbitmq:
    build:
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/rabbitmq/Dockerfile
    container_name: docker-magento_rabbitmq
    networks:
      - external
      - internal

  redis:
    build:
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/redis/Dockerfile
    container_name: docker-magento_redis
    networks:
      - internal

  redis-admin:
    build:
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/redis-admin/Dockerfile
    container_name: docker-magento_redis-admin
    depends_on:
      - redis
    environment:
      REDIS_1_HOST: "redis"
    networks:
      - external
      - internal

  mailhog:
    hostname: mailhog
    build:
      context: $APP_DIRECTORY
      dockerfile: $DOCKER_DIRECTORY/images/mailhog/Dockerfile
    container_name: docker-magento_mailhog
    networks:
      - internal
      - external

networks:
  internal:
  external:

volumes:
  elasticsearch:
  mysql:
  nginx_logs:
